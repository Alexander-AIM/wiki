name: Update wiki posts

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-posts:
    runs-on: ubuntu-latest
    name: Update wiki posts

    steps:
      # Clone posts repository
      - name: Clone posts repository
        uses: actions/checkout@v3
        with:
          clean: true
          path: "posts"
          token: ${{ secrets.CI_TOKEN }}

      # Clone wiki repository
      - name: Clone wiki repository
        uses: actions/checkout@v3
        with:
          clean: true
          repository: "cibucristi/wiki-website"
          path: "wiki"
          ref: "main"
          token: ${{ secrets.CI_TOKEN }}

      # Install hunspell and Romanian dictionary
      - name: Install hunspell and Romanian dictionary
        run: sudo apt-get install hunspell hunspell-ro

      # Update posts
      - name: Update posts
        if: always()
        shell: bash
        run: |
          mkdir ./wiki/new_wiki
          mv -f ./wiki/wiki/.vitepress ./wiki/new_wiki
          mv -f ./posts/* ./wiki/new_wiki
          rm -rf ./wiki/wiki
          mv -f ./wiki/new_wiki ./wiki/wiki
          
          # Words and patterns to ignore
          ignore_words=("masterlist" "GTA" "Eneba" "Rockstar" "CEF" "gp" "poti" "multiplayerul" "Esti" "Wikipediaul" "intalniti" "masina" "jucatorule" "EditezÄƒ" "wikipedia" "iamCibu")
          ignore_patterns=("</?[a-zA-Z][^>]*>")

          # Function to filter out lines containing ignored words and patterns
          filter_ignored() {
              while IFS= read -r line; do
                  # Flag to indicate whether the line should be ignored
                  ignore_line=false
                  # Check each word in the line against the list of ignored words
                  for word in "${ignore_words[@]}"; do
                      # If the word is found in the line, set the flag and break the loop
                      if [[ $line == *"$word"* ]]; then
                          ignore_line=true
                          break
                      fi
                  done
                  # Check each pattern in the line against the list of ignored patterns
                  for pattern in "${ignore_patterns[@]}"; do
                      # If the pattern is found in the line, set the flag and break the loop
                      if [[ $line =~ $pattern ]]; then
                          ignore_line=true
                          break
                      fi
                  done
                  # Output the line if it should not be ignored
                  if [ "$ignore_line" = false ]; then
                      echo "$line"
                  fi
              done
          }

          # Check for typos in all files recursively within ./wiki/wiki and store the result in a file
          find ./wiki/wiki -type f -exec hunspell -d ro_RO,en_US -l -i utf-8 {} + | filter_ignored > filtered_typos.txt || true

          # Debugging statement to check the output of the filter_ignored function
          echo "Filtered typos:"
          cat filtered_typos.txt

          # If typos are found, create an issue with the list of typos and fail the action
          if [ -s "filtered_typos.txt" ]; then
              echo "Typos found:"
              cat filtered_typos.txt
              
              # Format typos in Markdown
              body="### Typos Found:\n\`\`\`\n$(cat filtered_typos.txt)\n\`\`\`"
              
              # Create issue using GitHub REST API
              echo "Creating issue..."
              # Escape special characters in the issue body
              escaped_body=$(echo "$body" | jq -Rs 'gsub("\\\"";"\"")')
              # Create issue with escaped body
              curl -X POST -H "Authorization: token ${{ secrets.CI_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -d "{\"title\":\"Typos Found in Wiki\",\"body\":$escaped_body}" "https://api.github.com/repos/ragebhood/wiki/issues" || true
              
              # Fail the action
              exit 1
          fi
          
          cd wiki
          git config --global user.email "b-hood.ro@github.com"
          git config --global user.name "b-hood.ro"
          git status
          git add .
          git commit -m "Update posts with ${{ github.sha }}" || true
          git push || true
