name: Update wiki posts

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-posts:
    runs-on: ubuntu-latest
    name: Update wiki posts

    steps:
      # Clone posts repository
      - name: Clone posts repository
        uses: actions/checkout@v3
        with:
          clean: true
          path: "posts"
          token: ${{ secrets.CI_TOKEN }}

      # Clone wiki repository
      - name: Clone wiki repository
        uses: actions/checkout@v3
        with:
          clean: true
          repository: "cibucristi/wiki-website"
          path: "wiki"
          ref: "main"
          token: ${{ secrets.CI_TOKEN }}

      # Install hunspell and Romanian dictionary
      - name: Install hunspell and Romanian dictionary
        run: sudo apt-get install hunspell hunspell-ro

      # Update posts
      - name: Update posts
        if: always()
        shell: bash
        run: |
          mkdir ./wiki/new_wiki
          mv -f ./wiki/wiki/.vitepress ./wiki/new_wiki
          mv -f ./posts/* ./wiki/new_wiki
          rm -rf ./wiki/wiki
          mv -f ./wiki/new_wiki ./wiki/wiki
          
          # Words to ignore
          ignore_words=("masterlist" "GTA" "Eneba" "Rockstar" "CEF" "gp" "poti" "multiplayerul" "Esti" "Wikipediaul" "intalniti" "masina" "jucatorule" "EditezÄƒ" "wikipedia" "iamCibu")

          # Function to filter out ignored words
          filter_ignored() {
              while read -r line; do
                  # Check if the word is in the list of ignored words
                  if ! [[ " ${ignore_words[@]} " =~ " $line " ]]; then
                      echo "$line"
                  fi
              done
          }

          # Check for typos and store the result in a file
          hunspell -d ro_RO,en_US -l -i utf-8 ./wiki/wiki/* > typos.txt || true

          # Filter out ignored words
          cat typos.txt | filter_ignored > filtered_typos.txt

          # Debugging statement to check the output of the filter_ignored function
          echo "Filtered typos:"
          cat filtered_typos.txt

          # If typos are found, create an issue with the list of filenames containing typos and fail the action
          if [ -s "filtered_typos.txt" ]; then
              echo "Typos found:"
              cat filtered_typos.txt
              
              # Extract filenames from the list of typos
              filenames=$(awk -F ':' '{print $1}' filtered_typos.txt)
              
              # Format filenames in Markdown
              body="### Files with Typos Found:\n\`\`\`\n$filenames\n\`\`\`"
              
              # Create issue using GitHub REST API
              echo "Creating issue..."
              # Escape special characters in the issue body
              escaped_body=$(echo "$body" | jq -Rs 'gsub("\\\"";"\"")')
              # Create issue with escaped body and capture the response
              issue_response=$(curl -s -X POST -H "Authorization: token ${{ secrets.CI_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -d "{\"title\":\"Typos Found in Wiki\",\"body\":$escaped_body}" "https://api.github.com/repos/ragebhood/wiki/issues") || true
              
              # Debugging statement to check the issue response
              echo "Issue Response:"
              echo "$issue_response"
              
              # Check if there are any errors in the issue response
              if [[ "$issue_response" == *"errors"* ]]; then
                  echo "Error creating issue. Please check the GitHub API response for details."
                  exit 1
              fi
              
              # Get the issue number from the response
              issue_number=$(echo "$issue_response" | jq -r '.number')
              
              # Debugging statement to check the issue number
              echo "Issue Number: $issue_number"
              
              # Send messages with the remaining typos if any
              while IFS= read -r typo_chunk; do
                  # Escape special characters in the message body
                  escaped_message=$(echo "$typo_chunk" | jq -Rs 'gsub("\\\"";"\"")')
                  # Send message with escaped body
                  curl -s -X POST -H "Authorization: token ${{ secrets.CI_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -d "{\"body\":$escaped_message}" "https://api.github.com/repos/ragebhood/wiki/issues/$issue_number/comments" || true
              done < <(tail -n +2 filtered_typos.txt)
              
              # Fail the action
              exit 1
          fi
          
          cd wiki
          git config --global user.email "b-hood.ro@github.com"
          git config --global user.name "b-hood.ro"
          git status
          git add .
          git commit -m "Update posts with ${{ github.sha }}" || true
          git push || true
